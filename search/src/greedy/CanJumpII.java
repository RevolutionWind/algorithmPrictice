package greedy;

/**
 * 45. 跳跃游戏 II
 * <p>
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 * <p>
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * <p>
 * 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 * <p>
 * 示例:
 * <p>
 * 输入: [2,3,1,1,4]
 * 输出: 2
 * 解释: 跳到最后一个位置的最小跳跃数是 2。
 * 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
 *
 * 假设你总是可以到达数组的最后一个位置。
 *
 * @author sunxy
 * @date 2021/1/13 15:29
 */
@SuppressWarnings("unused")
public class CanJumpII {

    /*
        1. 如果某一个作为起跳点的格子可以跳跃的距离是3，那么表示后面3个格子都可以作为起跳点
            可以对每一个作为起跳点的格子都尝试跳一次，把能跳到最远的距离不断更新
        2. 如果从这个起跳点起跳叫做第一次跳跃，那么从后面三个格子起跳都可以叫做第二次跳跃
        3. 所以当第一次跳跃结束时，从下一个格子开始，到现在能跳到最远的距离，都是下一次跳跃的起跳点。
              对每一次 跳跃 用 for 循环来模拟。
              跳完一次之后，更新下一次 起跳点 的范围。
              在新的范围内跳，更新 能跳到最远的距离。
        4. 记录跳跃次数，如果跳到了终点，就得到了结果。
     */
    public int jump(int[] nums) {
        int step = 0, start = 0, end = 1;
        int len = nums.length;
        while (end < len) {
            // 最远距离
            int maxDis = 0;
            for (int i = start; i < end; i++) {
                maxDis = Math.max(maxDis, i + nums[i]);
            }
            start = end;
            end = maxDis + 1;
            step++;
        }
        return step;
    }

}
